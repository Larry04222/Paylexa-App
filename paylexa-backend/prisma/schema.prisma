generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  email           String   @unique
  passwordHash    String
  fullName        String
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  wallets         Wallet[]
  kyc             Kyc?
  sessions        Session[]
  devices         DeviceFingerprint[]
  statements      Statement[]
  settings        Settings?
}

model Kyc {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  documentType   String
  documentNumber String
  metadata       Json
  status         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Wallet {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  currency     Currency @relation(fields: [currencyCode], references: [code])
  currencyCode String
  balance      Float    @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  statements   Statement[]
}

model Session {
  id                 String   @id @default(uuid())
  user               User     @relation(fields: [userId], references: [id])
  userId             String
  refreshTokenHash   String
  expiresAt          DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  deviceFingerprint  DeviceFingerprint? @relation(fields: [deviceFingerprintId], references: [id])
  deviceFingerprintId String?
}

model DeviceFingerprint {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  fingerprint String
  createdAt   DateTime @default(now())
  sessions    Session[]
}

model FeatureToggle {
  id       String @id @default(uuid())
  key      String @unique
  enabled  Boolean @default(false)
  metadata Json?
}

model Statement {
  id           String   @id @default(uuid())
  wallet       Wallet   @relation(fields: [walletId], references: [id])
  walletId     String
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  type         String
  amount       Float
  balanceAfter Float
  reference    String
  metadata     Json
  createdAt    DateTime @default(now())
}

model Settings {
  id          String @id @default(uuid())
  user        User   @relation(fields: [userId], references: [id])
  userId      String @unique
  preferences Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Currency {
  code      String  @id
  name      String
  createdAt DateTime @default(now())
}

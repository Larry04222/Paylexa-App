const http = require('http');
const { URL } = require('url');

function createResponse(res) {
  res.status = function (code) {
    res.statusCode = code;
    return res;
  };
  res.json = function (data) {
    res.setHeader('Content-Type', 'application/json');
    res.end(JSON.stringify(data));
  };
  res.send = function (data) {
    if (typeof data === 'object') {
      res.setHeader('Content-Type', 'application/json');
      res.end(JSON.stringify(data));
    } else {
      res.end(data);
    }
  };
  res.locals = res.locals || {};
  return res;
}

class App {
  constructor() {
    this.middlewares = [];
    this.routes = [];
  }

  use(fn) {
    this.middlewares.push(fn);
  }

  _register(method, path, handlers) {
    this.routes.push({ method, path, handlers });
  }

  get(path, ...handlers) {
    this._register('GET', path, handlers);
  }

  post(path, ...handlers) {
    this._register('POST', path, handlers);
  }

  put(path, ...handlers) {
    this._register('PUT', path, handlers);
  }

  delete(path, ...handlers) {
    this._register('DELETE', path, handlers);
  }

  async handle(req, res) {
    createResponse(res);
    const requestUrl = new URL(req.url, `http://${req.headers.host || 'localhost'}`);
    req.path = requestUrl.pathname;
    req.query = Object.fromEntries(requestUrl.searchParams.entries());

    const stack = [...this.middlewares];
    const route = this.routes.find(r => r.method === req.method && r.path === req.path);
    if (route) {
      stack.push(...route.handlers);
    } else {
      stack.push((req, res) => {
        res.status(404).json({ message: 'Not Found' });
      });
    }

    let idx = 0;
    const next = (err) => {
      const handler = stack[idx++];
      if (!handler) {
        if (err) {
          res.status(500).json({ message: err.message || 'Internal Server Error' });
        }
        return;
      }
      try {
        if (err) {
          if (handler.length === 4) {
            return Promise.resolve(handler(err, req, res, next));
          }
          return next(err);
        }
        if (handler.length <= 2) {
          return Promise.resolve(handler(req, res)).catch(next);
        }
        return Promise.resolve(handler(req, res, next)).catch(next);
      } catch (error) {
        next(error);
      }
    };
    next();
  }

  listen(port, cb) {
    const server = http.createServer((req, res) => {
      this.handle(req, res);
    });
    return server.listen(port, cb);
  }
}

function express() {
  return new App();
}

express.json = function jsonParser() {
  return function (req, res, next) {
    if (['POST', 'PUT', 'PATCH'].includes(req.method)) {
      let body = '';
      req.on('data', chunk => {
        body += chunk;
      });
      req.on('end', () => {
        if (body.length > 0) {
          try {
            req.body = JSON.parse(body);
          } catch (error) {
            res.status(400).json({ message: 'Invalid JSON payload' });
            return;
          }
        } else {
          req.body = {};
        }
        next();
      });
    } else {
      req.body = {};
      next();
    }
  };
};

module.exports = express;

const fs = require('fs');
const path = require('path');
const { randomUUID } = require('crypto');

const DB_FILE = path.join(__dirname, '../../..', 'prisma', 'data.json');
const DEFAULT_DB = {
  users: [],
  kycs: [],
  wallets: [],
  sessions: [],
  deviceFingerprints: [],
  featureToggles: [],
  statements: [],
  settings: [],
  currencies: []
};

function ensureDbFile() {
  if (!fs.existsSync(DB_FILE)) {
    fs.mkdirSync(path.dirname(DB_FILE), { recursive: true });
    fs.writeFileSync(DB_FILE, JSON.stringify(DEFAULT_DB, null, 2));
  }
}

class PrismaTable {
  constructor(client, name) {
    this.client = client;
    this.name = name;
  }

  _data() {
    return this.client._db[this.name];
  }

  _save() {
    this.client._save();
  }

  async findUnique({ where }) {
    const keys = Object.keys(where || {});
    return this._data().find(item => keys.every(key => item[key] === where[key])) || null;
  }

  async findFirst({ where }) {
    if (!where) {
      return this._data()[0] || null;
    }
    return this._data().find(item => Object.keys(where).every(key => item[key] === where[key])) || null;
  }

  async findMany({ where } = {}) {
    if (!where) {
      return [...this._data()];
    }
    return this._data().filter(item => Object.entries(where).every(([key, value]) => {
      if (value && typeof value === 'object' && !Array.isArray(value)) {
        if (value.in) {
          return value.in.includes(item[key]);
        }
        if (value.equals !== undefined) {
          return item[key] === value.equals;
        }
      }
      return item[key] === value;
    }));
  }

  async create({ data }) {
    const record = { ...data };
    if (!record.id) {
      record.id = randomUUID();
    }
    this._data().push(record);
    this._save();
    return record;
  }

  async update({ where, data }) {
    const keys = Object.keys(where || {});
    const index = this._data().findIndex(item => keys.every(key => item[key] === where[key]));
    if (index === -1) {
      throw new Error(`${this.name} record not found`);
    }
    this._data()[index] = { ...this._data()[index], ...data };
    this._save();
    return this._data()[index];
  }

  async upsert({ where, create, update }) {
    const existing = await this.findUnique({ where });
    if (existing) {
      return this.update({ where, data: update });
    }
    return this.create({ data: { ...create, ...where } });
  }

  async deleteMany({ where } = {}) {
    if (!where) {
      this.client._db[this.name] = [];
      this._save();
      return { count: 0 };
    }
    const before = this._data().length;
    this.client._db[this.name] = this._data().filter(item => !Object.keys(where).every(key => item[key] === where[key]));
    this._save();
    return { count: before - this._data().length };
  }
}

class PrismaClient {
  constructor() {
    ensureDbFile();
    this._db = JSON.parse(fs.readFileSync(DB_FILE, 'utf-8'));
    this.user = new PrismaTable(this, 'users');
    this.kyc = new PrismaTable(this, 'kycs');
    this.wallet = new PrismaTable(this, 'wallets');
    this.session = new PrismaTable(this, 'sessions');
    this.deviceFingerprint = new PrismaTable(this, 'deviceFingerprints');
    this.featureToggle = new PrismaTable(this, 'featureToggles');
    this.statement = new PrismaTable(this, 'statements');
    this.settings = new PrismaTable(this, 'settings');
    this.currency = new PrismaTable(this, 'currencies');
  }

  async $connect() {
    return true;
  }

  async $disconnect() {
    return true;
  }

  async $transaction(callback) {
    return callback(this);
  }

  _save() {
    fs.writeFileSync(DB_FILE, JSON.stringify(this._db, null, 2));
  }
}

module.exports = {
  PrismaClient
};
